"""
실습: 정렬(Sorting)
-순서 없이 배열된 자료들을 어떤 기준에 따라
 오름차순(ascending order)으로 또는
 내림차순(descending order)으로 재배열
<삽입 정렬>
    - 원소를 한 번에 하나씩 정해진 순서대로 정렬
    - 효율적이지는 않지만 매우 간단
    - 입력 데이터의 배열을 저장하기 위해 추가적인 공간(메모리) 불필요
-리스트생성
    - 숫자를 입력 받아 리스트에 추가
    - '0'을 입력하면 리스트 생성을 멈추고, 정렬 수행
-정렬 수행 단계 중간 리스트 출력
-최종 정렬 완성된 리스트 출력

입력할 수 : 5
입력할 수 : 3
입력할 수 : 2
입력할 수 : 4
입력할 수 : 1
입력할 수 : 0
--------------------------------
입력된 리스트 : [5, 3, 2, 4, 1]
1 단계 : [3, 5, 2, 4, 1]
2 단계 : [2, 3, 5, 3, 1]
3 단계 : [2, 3, 4, 5, 1]
4 단계 : [1, 2, 3, 4, 5]
최종 리스트 : [1, 2, 3, 4, 5]
---------------------------------
입력할 수 :
"""

# 솔루션
list_s = []
i=0
# '0'을 입력받을 때 까지 입력받은 정수를 리스트에 추가.
while True:
    a = int(input("입력할 수 : "))
    if a == 0 :
        break
    else : list_s.append(a)

print("입력된 리스트 :", list_s)
# 입력된 리스트를 내림차순으로 정렬한다.
for i in range(1, len(list_s), 1):  # i는 리스트의 각 요소 인덱스를 순서대로 나타낸다.
    for j in range(0, i, 1):  # j는 i와 비교할 리스트의 요소 인덱스이다. (j < i)
        # i보다 앞에 있는 j번 째 요소가 i번 째 요소보다 크면 두 요소의 값을 서로 바꾼다.
        if list_s[i] < list_s[j] :
            tmp = list_s[i]
            del(list_s[i])
            list_s.insert(j,tmp)
    # i번째 정렬 결과를 출력한다.
    print(" %d 단계 :" % i , list_s)

print("최종 리스트 :", list_s)